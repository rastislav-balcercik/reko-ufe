/* tslint:disable */
/* eslint-disable */
/**
 * Reconvalescence Support API
 * Reconvalescence support
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: <your_email>
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';
import { UserType } from '../../components';

/**
 * 
 * @export
 * @interface ReconvalescenceTicket
 */
export interface ReconvalescenceTicket {
    /**
     * Unique id of the entry in the reconvalescence list
     * @type {string}
     * @memberof ReconvalescenceTicket
     */
    'id': string;
    /**
     * Unique identifier of the patient
     * @type {string}
     * @memberof ReconvalescenceTicket
     */
    'patientId': string;
    /**
     * Unique identifier of the doctor
     * @type {string}
     * @memberof ReconvalescenceTicket
     */
    'doctorId': string;
    /**
     * Message from the patient to the doctor
     * @type {string}
     * @memberof ReconvalescenceTicket
     */
    'message': string;
    /**
     * Message from the doctor to the patient
     * @type {string}
     * @memberof ReconvalescenceTicket
     */
    'reply'?: string;
    /**
     * Timestamp when the user took the surgery or visited the doctor
     * @type {string}
     * @memberof ReconvalescenceTicket
     */
    'surgeryDate': string;
}

/**
 * ReconvalescenceTicketListApi - axios parameter creator
 * @export
 */
export const ReconvalescenceTicketListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this method to store new entry into the reconvalescence list.
         * @summary Saves new entry into Reconvalescence list
         * @param {string} userId pass the id of the particular user
         * @param {ReconvalescenceTicket} reconvalescenceTicket Reconvalence ticket to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReconvalescenceTicket: async (userId: string, reconvalescenceTicket: ReconvalescenceTicket, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('createReconvalescenceTicket', 'userId', userId)
            // verify required parameter 'reconvalescenceTicket' is not null or undefined
            assertParamExists('createReconvalescenceTicket', 'reconvalescenceTicket', reconvalescenceTicket)
            const localVarPath = `/reconvalescence-list/{userId}/entries`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reconvalescenceTicket, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to delete the specific reconvalescence ticket.
         * @summary Deletes specific reconvalescence ticket
         * @param {string} userId pass the id of the particular user
         * @param {string} entryId pass the id of the particular entry in the reconvalsescence list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReconvalescenceTicket: async (userId: string, entryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteReconvalescenceTicket', 'userId', userId)
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('deleteReconvalescenceTicket', 'entryId', entryId)
            const localVarPath = `/reconvalescence-list/{userId}/entries/{entryId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"entryId"}}`, encodeURIComponent(String(entryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * By using userId you get list of reconvalescence tickets.
         * @summary Provides the reconvalence list
         * @param {string} userId pass the id of the particular user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReconvalescenceList: async (userId: string, userType: UserType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getReconvalescenceList', 'userId', userId)
            const localVarPath = `/reconvalescence-list/{userId}/entries`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {
              role: userType
            } as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the details of the reconvalescence ticket
         * @summary Provides details about reconvalsescence ticket
         * @param {string} userId pass the id of the particular user
         * @param {string} entryId pass the id of the particular entry in reconvalsescence list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReconvalescenceTicket: async (userId: string, entryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getReconvalescenceTicket', 'userId', userId)
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('getReconvalescenceTicket', 'entryId', entryId)
            const localVarPath = `/reconvalescence-list/{userId}/entries/{entryId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"entryId"}}`, encodeURIComponent(String(entryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to update content of the reconvalesncence ticket.
         * @summary Updates specific entry
         * @param {string} userId pass the id of the particular ambulance
         * @param {string} entryId pass the id of the particular entry in the waiting list
         * @param {ReconvalescenceTicket} reconvalescenceTicket Waiting list entry to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReconvalescenceTicket: async (userId: string, entryId: string, reconvalescenceTicket: ReconvalescenceTicket, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateReconvalescenceTicket', 'userId', userId)
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('updateReconvalescenceTicket', 'entryId', entryId)
            // verify required parameter 'reconvalescenceTicket' is not null or undefined
            assertParamExists('updateReconvalescenceTicket', 'reconvalescenceTicket', reconvalescenceTicket)
            const localVarPath = `/reconvalescence-list/{userId}/entries/{entryId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"entryId"}}`, encodeURIComponent(String(entryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reconvalescenceTicket, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReconvalescenceTicketListApi - functional programming interface
 * @export
 */
export const ReconvalescenceTicketListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReconvalescenceTicketListApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this method to store new entry into the reconvalescence list.
         * @summary Saves new entry into Reconvalescence list
         * @param {string} userId pass the id of the particular user
         * @param {ReconvalescenceTicket} reconvalescenceTicket Reconvalence ticket to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createReconvalescenceTicket(userId: string, reconvalescenceTicket: ReconvalescenceTicket, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReconvalescenceTicket>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createReconvalescenceTicket(userId, reconvalescenceTicket, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this method to delete the specific reconvalescence ticket.
         * @summary Deletes specific reconvalescence ticket
         * @param {string} userId pass the id of the particular user
         * @param {string} entryId pass the id of the particular entry in the reconvalsescence list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteReconvalescenceTicket(userId: string, entryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteReconvalescenceTicket(userId, entryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * By using userId you get list of reconvalescence tickets.
         * @summary Provides the reconvalence list
         * @param {string} userId pass the id of the particular user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReconvalescenceList(userId: string, userType: UserType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ReconvalescenceTicket>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReconvalescenceList(userId, userType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the details of the reconvalescence ticket
         * @summary Provides details about reconvalsescence ticket
         * @param {string} userId pass the id of the particular user
         * @param {string} entryId pass the id of the particular entry in reconvalsescence list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReconvalescenceTicket(userId: string, entryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReconvalescenceTicket>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReconvalescenceTicket(userId, entryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this method to update content of the reconvalesncence ticket.
         * @summary Updates specific entry
         * @param {string} userId pass the id of the particular ambulance
         * @param {string} entryId pass the id of the particular entry in the waiting list
         * @param {ReconvalescenceTicket} reconvalescenceTicket Waiting list entry to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateReconvalescenceTicket(userId: string, entryId: string, reconvalescenceTicket: ReconvalescenceTicket, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReconvalescenceTicket>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateReconvalescenceTicket(userId, entryId, reconvalescenceTicket, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReconvalescenceTicketListApi - factory interface
 * @export
 */
export const ReconvalescenceTicketListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReconvalescenceTicketListApiFp(configuration)
    return {
        /**
         * Use this method to store new entry into the reconvalescence list.
         * @summary Saves new entry into Reconvalescence list
         * @param {string} userId pass the id of the particular user
         * @param {ReconvalescenceTicket} reconvalescenceTicket Reconvalence ticket to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReconvalescenceTicket(userId: string, reconvalescenceTicket: ReconvalescenceTicket, options?: any): AxiosPromise<ReconvalescenceTicket> {
            return localVarFp.createReconvalescenceTicket(userId, reconvalescenceTicket, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to delete the specific reconvalescence ticket.
         * @summary Deletes specific reconvalescence ticket
         * @param {string} userId pass the id of the particular user
         * @param {string} entryId pass the id of the particular entry in the reconvalsescence list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReconvalescenceTicket(userId: string, entryId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteReconvalescenceTicket(userId, entryId, options).then((request) => request(axios, basePath));
        },
        /**
         * By using userId you get list of reconvalescence tickets.
         * @summary Provides the reconvalence list
         * @param {string} userId pass the id of the particular user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReconvalescenceList(userId: string, userType: UserType, options?: any): AxiosPromise<Array<ReconvalescenceTicket>> {
            return localVarFp.getReconvalescenceList(userId, userType, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the details of the reconvalescence ticket
         * @summary Provides details about reconvalsescence ticket
         * @param {string} userId pass the id of the particular user
         * @param {string} entryId pass the id of the particular entry in reconvalsescence list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReconvalescenceTicket(userId: string, entryId: string, options?: any): AxiosPromise<ReconvalescenceTicket> {
            return localVarFp.getReconvalescenceTicket(userId, entryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to update content of the reconvalesncence ticket.
         * @summary Updates specific entry
         * @param {string} userId pass the id of the particular ambulance
         * @param {string} entryId pass the id of the particular entry in the waiting list
         * @param {ReconvalescenceTicket} reconvalescenceTicket Waiting list entry to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReconvalescenceTicket(userId: string, entryId: string, reconvalescenceTicket: ReconvalescenceTicket, options?: any): AxiosPromise<ReconvalescenceTicket> {
            return localVarFp.updateReconvalescenceTicket(userId, entryId, reconvalescenceTicket, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReconvalescenceTicketListApi - interface
 * @export
 * @interface ReconvalescenceTicketListApi
 */
export interface ReconvalescenceTicketListApiInterface {
    /**
     * Use this method to store new entry into the reconvalescence list.
     * @summary Saves new entry into Reconvalescence list
     * @param {string} userId pass the id of the particular user
     * @param {ReconvalescenceTicket} reconvalescenceTicket Reconvalence ticket to store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReconvalescenceTicketListApiInterface
     */
    createReconvalescenceTicket(userId: string, reconvalescenceTicket: ReconvalescenceTicket, options?: AxiosRequestConfig): AxiosPromise<ReconvalescenceTicket>;

    /**
     * Use this method to delete the specific reconvalescence ticket.
     * @summary Deletes specific reconvalescence ticket
     * @param {string} userId pass the id of the particular user
     * @param {string} entryId pass the id of the particular entry in the reconvalsescence list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReconvalescenceTicketListApiInterface
     */
    deleteReconvalescenceTicket(userId: string, entryId: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * By using userId you get list of reconvalescence tickets.
     * @summary Provides the reconvalence list
     * @param {string} userId pass the id of the particular user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReconvalescenceTicketListApiInterface
     */
    getReconvalescenceList(userId: string, userType: UserType, options?: AxiosRequestConfig): AxiosPromise<Array<ReconvalescenceTicket>>;

    /**
     * Returns the details of the reconvalescence ticket
     * @summary Provides details about reconvalsescence ticket
     * @param {string} userId pass the id of the particular user
     * @param {string} entryId pass the id of the particular entry in reconvalsescence list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReconvalescenceTicketListApiInterface
     */
    getReconvalescenceTicket(userId: string, entryId: string, options?: AxiosRequestConfig): AxiosPromise<ReconvalescenceTicket>;

    /**
     * Use this method to update content of the reconvalesncence ticket.
     * @summary Updates specific entry
     * @param {string} userId pass the id of the particular ambulance
     * @param {string} entryId pass the id of the particular entry in the waiting list
     * @param {ReconvalescenceTicket} reconvalescenceTicket Waiting list entry to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReconvalescenceTicketListApiInterface
     */
    updateReconvalescenceTicket(userId: string, entryId: string, reconvalescenceTicket: ReconvalescenceTicket, options?: AxiosRequestConfig): AxiosPromise<ReconvalescenceTicket>;

}

/**
 * ReconvalescenceTicketListApi - object-oriented interface
 * @export
 * @class ReconvalescenceTicketListApi
 * @extends {BaseAPI}
 */
export class ReconvalescenceTicketListApi extends BaseAPI implements ReconvalescenceTicketListApiInterface {
    /**
     * Use this method to store new entry into the reconvalescence list.
     * @summary Saves new entry into Reconvalescence list
     * @param {string} userId pass the id of the particular user
     * @param {ReconvalescenceTicket} reconvalescenceTicket Reconvalence ticket to store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReconvalescenceTicketListApi
     */
    public createReconvalescenceTicket(userId: string, reconvalescenceTicket: ReconvalescenceTicket, options?: AxiosRequestConfig) {
        return ReconvalescenceTicketListApiFp(this.configuration).createReconvalescenceTicket(userId, reconvalescenceTicket, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to delete the specific reconvalescence ticket.
     * @summary Deletes specific reconvalescence ticket
     * @param {string} userId pass the id of the particular user
     * @param {string} entryId pass the id of the particular entry in the reconvalsescence list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReconvalescenceTicketListApi
     */
    public deleteReconvalescenceTicket(userId: string, entryId: string, options?: AxiosRequestConfig) {
        return ReconvalescenceTicketListApiFp(this.configuration).deleteReconvalescenceTicket(userId, entryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * By using userId you get list of reconvalescence tickets.
     * @summary Provides the reconvalence list
     * @param {string} userId pass the id of the particular user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReconvalescenceTicketListApi
     */
    public getReconvalescenceList(userId: string, userType: UserType, options?: AxiosRequestConfig) {
        return ReconvalescenceTicketListApiFp(this.configuration).getReconvalescenceList(userId, userType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the details of the reconvalescence ticket
     * @summary Provides details about reconvalsescence ticket
     * @param {string} userId pass the id of the particular user
     * @param {string} entryId pass the id of the particular entry in reconvalsescence list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReconvalescenceTicketListApi
     */
    public getReconvalescenceTicket(userId: string, entryId: string, options?: AxiosRequestConfig) {
        return ReconvalescenceTicketListApiFp(this.configuration).getReconvalescenceTicket(userId, entryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to update content of the reconvalesncence ticket.
     * @summary Updates specific entry
     * @param {string} userId pass the id of the particular ambulance
     * @param {string} entryId pass the id of the particular entry in the waiting list
     * @param {ReconvalescenceTicket} reconvalescenceTicket Waiting list entry to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReconvalescenceTicketListApi
     */
    public updateReconvalescenceTicket(userId: string, entryId: string, reconvalescenceTicket: ReconvalescenceTicket, options?: AxiosRequestConfig) {
        return ReconvalescenceTicketListApiFp(this.configuration).updateReconvalescenceTicket(userId, entryId, reconvalescenceTicket, options).then((request) => request(this.axios, this.basePath));
    }
}


